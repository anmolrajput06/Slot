WILD 
FEATURE 
GOLD FEATURE 

 Paytable
 
symbols = 1
5=500.00 
4=100.00 
3=20.00 

symbols = 2
5=150.00 
4=50.00 
3=15.00 

symbols = 3
5 = 125.00 
4=50.00 
3=15.00 

symbols = 4
5 = 125.00 
4=50.00 
3=15.00 

symbols = 5
5 = 125.00 
4=50.00 
3=15.00 

symbols = 6
5 = 125.00 
4=50.00 
3=15.00 

symbols = 7
5 = 125.00 
4=50.00 
3=15.00 


symbols = 8
5 = 125.00 
4=50.00 
3=15.00 

symbols = 9
5 = 125.00 
4=50.00 
3=15.00 

symbols = 10
5 = 125.00 
4=50.00 
3=15.00 

WILD is wild for everything except FEATURE and GOLD FEATURE. 
Only highest winner paid per winning combination. Line pays must occur on adjacent reels, beginning with the leftmost reel. All 5 reels contain a number of adjacent positions that, before the reel spin initiates, are randomly replaced with symbols from the paytable. Paytable reflects current bet configuration.


FREE SPIN FEATURE 

WILD 
FEATURE 
GOLD FEATURE 
WILD FEATURE 
PERSISTING WILD 
5 or more scattered FEATURE and/or GOLD FEATURE on adjacent reels, beginning with the leftmost reel, trigger the Free Spin Feature. 5 FEATURE and/or GOLD FEATURE award 5 Free Spins. For every FEATURE and/or GOLD FEATURE above the initial 5 triggering the feature, 5 additional Free Spins are awarded up to a maximum of 80 initial Free Spins. 
Each GOLD FEATURE that participates in feature trigger combination is replaced with PERSISTING WILD and locks into that reel position on screen at the start of the Free Spins. PERSISTING WILD remains locked for the entire feature. PERSISTING WILD is wild for all symbols except FEATURE and GOLD FEATURE.
If FEATURE or GOLD FEATURE lands behind PERSISTING WILD and a feature is possible, then its replaced with WILD FEATURE for the current spin only. WILD FEATURE is wild for all symbols. During free spins, 5 or more scattered FEATURE, GOLD FEATURE and/or WILD FEATURE on adjacent reels, beginning with the leftmost reel, add additional spins to the amount of 
free spins remaining. 
During free spins, an alternate set of reels is used. 
All 5 reels contain a number of adjacent positions that, before the reel spin initiates, are randomly replaced with symbols 
from the paytable. 
Winning combinations for these reels are identical to the base game. 
During Free Spins, the bet per line and the active paylines remain the same as the spin that triggered the feature. 
Press the 'Start Feature' button to start the Free Spins.
  



PAYLINES 
const paylines = [
  [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]], // Line 1 
  [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]], // Line 2 
  [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]], // Line 3 
  [[0, 0], [1, 1], [2, 2], [3, 1], [4, 0]], // Line 4 
  [[0, 2], [1, 1], [2, 0], [3, 1], [4, 2]], // Line 5 
  [[0, 0], [1, 0], [2, 1], [3, 2], [4, 2]], // Line 6 
  [[0, 2], [1, 2], [2, 1], [3, 0], [4, 0]], // Line 7 
  [[0, 1], [1, 2], [2, 2], [3, 2], [4, 1]], // Line 8 
  [[0, 1], [1, 0], [2, 0], [3, 0], [4, 1]], // Line 9 
  [[0, 2], [1, 1], [2, 1], [3, 1], [4, 0]], // Line 10 
  [[0, 0], [1, 1], [2, 1], [3, 1], [4, 2]], // Line 11
  [[0, 0], [1, 1], [2, 0], [3, 1], [4, 0]], // Line 12 
  [[0, 2], [1, 1], [2, 2], [3, 1], [4, 2]], // Line 13
  [[0, 1], [1, 0], [2, 1], [3, 2], [4, 1]], // Line 14 
  [[0, 1], [1, 2], [2, 1], [3, 0], [4, 1]], // Line 15 
  [[0, 0], [1, 0], [2, 2], [3, 2], [4, 2]], // Line 16
  [[0, 2], [1, 2], [2, 0], [3, 0], [4, 0]], // Line 17 
  [[0, 1], [1, 1], [2, 0], [3, 1], [4, 1]], // Line 18
  [[0, 1], [1, 1], [2, 2], [3, 1], [4, 1]], // Line 19
  [[0, 2], [1, 1], [2, 1], [3, 1], [4, 0]], // Line 20
  [[0, 0], [1, 1], [2, 2], [3, 2], [4, 1]], // Line 21
  [[0, 2], [1, 1], [2, 0], [3, 0], [4, 1]], // Line 22
  [[0, 1], [1, 2], [2, 2], [3, 1], [4, 0]], // Line 23
  [[0, 1], [1, 0], [2, 0], [3, 1], [4, 2]], // Line 24
  [[0, 0], [1, 2], [2, 1], [3, 0], [4, 1]], // Line 25
  [[0, 2], [1, 0], [2, 1], [3, 2], [4, 1]], // Line 26
  [[0, 0], [1, 0], [2, 1], [3, 1], [4, 2]], // Line 27
  [[0, 2], [1, 2], [2, 1], [3, 1], [4, 0]], // Line 28
  [[0, 1], [1, 0], [2, 1], [3, 0], [4, 2]], // Line 29
  [[0, 1], [1, 2], [2, 1], [3, 2], [4, 0]], // Line 30
  [[0, 2], [1, 1], [2, 2], [3, 1], [4, 0]], // Line 31
  [[0, 0], [1, 1], [2, 0], [3, 1], [4, 2]], // Line 32
  [[0, 2], [1, 2], [2, 0], [3, 1], [4, 2]], // Line 33
  [[0, 0], [1, 0], [2, 2], [3, 1], [4, 0]], // Line 34
  [[0, 2], [1, 2], [2, 0], [3, 1], [4, 0]], // Line 35
  [[0, 1], [1, 2], [2, 0], [3, 1], [4, 2]], // Line 36
  [[0, 1], [1, 0], [2, 2], [3, 1], [4, 0]], // Line 37
  [[0, 0], [1, 2], [2, 0], [3, 2], [4, 0]], // Line 38
  [[0, 2], [1, 0], [2, 2], [3, 0], [4, 2]], // Line 39
  [[0, 1], [1, 0], [2, 2], [3, 0], [4, 1]]  // Line 40
];
The following lines can contribute to wins. A win can occur on any or all of these lines. Wins on multiple paylines are added together. Total line bet must be divided equally between each active payline; therefore, all total bet amounts are not available. The total bet is the number of lines multiplied by the cash bet on each line.

Malfunction voids all pays and plays. RETURN TO PLAYER = 96.28% Only active paylines can register wins. 
A win cannot exceed 250,000.00 per wager. 
Game Client Version: 0.1.22 
Â©2013-2017 Scientific Games Corporation. All rights reserved.

this is my aal required condition

const paylines = require("./paylines");

const checkPaylineWin = (reels, betAmount) => {
  let totalWin = 0;
  let winningLines = [];

  paylines.forEach((line, index) => {
    const symbolsOnLine = line.map(([reelIndex, rowIndex]) => reels[reelIndex][rowIndex]);

    let firstSymbol = symbolsOnLine.find(s => s !== "WILD") || "WILD";
    let matchCount = 1;

    for (let i = 1; i < symbolsOnLine.length; i++) {
      if (symbolsOnLine[i] === firstSymbol || symbolsOnLine[i] === "WILD") {
        matchCount++;
      } else {
        break;
      }
    }

    if (matchCount >= 3) {
      const payoutMultiplier = getPayout(firstSymbol, matchCount);
      const winAmount = betAmount * payoutMultiplier;
      totalWin += winAmount;
      winningLines.push({ line: index + 1, symbol: firstSymbol, matchCount, payout: winAmount });
    }
  });


  return { totalWin, winningLines };
};


const getPayout = (symbol, count) => {
  const payoutTable = {
    "0": { 3: 5, 4: 10, 5: 50 },
    "1": { 3: 0.2, 4: 1, 5: 5 },
    "2": { 3: 0.15, 4: 0.5, 5: 1.5 },
    "3": { 3: 0.15, 4: 0.5, 5: 1.25 },
    "4": { 3: 0.1, 4: 0.3, 5: 1.0 },
    "5": { 3: 0.1, 4: 0.3, 5: 1.0 },
    "6": { 3: 0, 4: 0, 5: 0 },
    "7": { 3: 0, 4: 0, 5: 0 },
    "8": { 3: 5, 4: 10, 5: 50 },
  };
  return payoutTable[symbol]?.[count] || 0;
};




module.exports = { checkPaylineWin };


const Player = require("../models/player");
const SlotGame = require("../models/game");
const { checkPaylineWin } = require("../helper/calculateWin");
const paylines = require("../helper/paylines");

const spin = async (req, res) => {
  const { playerId, betAmount } = req.body;
  const MAX_WIN_LIMIT = 250000;
  const RTP_PERCENTAGE = 92

  try {
    const player = await Player.findById(playerId);
    if (!player) return res.status(404).json({ msg: "Player not found" });

    if (player.coins < betAmount) {
      return res.status(400).json({ msg: "Not enough coins" });
    }
    //  WILD=0,A=1,K=2 ,Q=3, J=4, 10=5 , FEATURE=6 ,GOLD FEATURE=7 ,PERSISTING WILD=8

    const symbols = ["0", "6", "7", "9", "1", "2", "3", "4", "5"];

    let reels = Array.from({ length: 5 }, () =>
      Array.from({ length: 3 }, () => symbols[Math.floor(Math.random() * symbols.length)])
    );
 
    if (!isValidReelState(reels)) {
      return res.status(500).json({ msg: "Malfunction detected. Spin voided." });
    }

    const { totalWin, winningLines } = checkPaylineWin(reels, betAmount);
    let finalWin = Math.min(totalWin, MAX_WIN_LIMIT);
    let adjustedWin = (finalWin * (RTP_PERCENTAGE / 100)).toFixed(2);

    const featureCount = reels.flat().filter(symbol => symbol.includes("7")).length;
    const freeSpinsWon = featureCount >= 5 ? Math.min(5 + (featureCount - 5) * 5, 80) : 0;

    let persistingWilds = reels.map(row => row.map(symbol => symbol === "8" ? true : false));

    player.coins = player.coins - betAmount + parseFloat(adjustedWin);
    player.freeSpins += freeSpinsWon;
    await player.save();

    const gameData = new SlotGame({
      playerId,
      reels,
      freeSpins: freeSpinsWon,
      // persistingWilds,
      totalWin: parseFloat(adjustedWin),
      winningLines,
      status: "Completed",
    });

    await gameData.save();

    res.json({
      msg: "Spin complete",
      reels,
      totalWin: parseFloat(adjustedWin),
      winningLines,
      freeSpinsWon,
      // persistingWilds,
    });
  } catch (err) {
    console.error("Malfunction detected:", err);
    res.status(500).json({ msg: "Malfunction voids all pays and plays." });
  }
};

const isValidReelState = (reels) => {
  const validSymbols = ["0", "6", "7", "9", "1", "2", "3", "4", "5"];
  return reels.flat().every(symbol => validSymbols.includes(symbol));
};



const freeSpin = async (req, res) => {
  const { playerId } = req.body;

  try {
    let player = await Player.findById(playerId);
    if (!player || player.freeSpins <= 0) return res.status(400).json({ msg: "No free spins available" });

    player.freeSpins -= 1;
    await player.save();

    return res.json({ msg: "Free spin used", remainingFreeSpins: player.freeSpins });
  } catch (err) {
    return res.status(500).json({ msg: "Server error" });
  }
};

module.exports = { spin, freeSpin };








